function [ trueval proxmean proxvar ] = ...
  cEn_calcHelperBootstrap( dataseries, datafunc, replicates )

% function [ trueval proxmean proxvar ] = ...
%   cEn_calcHelperBootstrap( dataseries, datafunc, replicates )
%
% This calls a user-supplied function to process data (typically an
% entropy-calculation function). This is called once with the supplied
% data series, to produce the "true" output, and several times with proxy
% data to produce bootstrapped estimates of the mean and variance of the
% output. Proxies are generated by drawing with replacement from the input
% data series tuples.
%
% "dataseries" is a (Nchans,Nsamples) matrix containing several data series.
% "datafunc" is a function handle, accepting one argument (the data series).
%   This function has the form:
%     function outval = datafunc( dataseries )
%   This is typically defined as a wrapper passing additional arguments:
%     datafunc = @( dataseries ) doSomething( dataseries, extra_args );
% "replicates" is the number of proxies to generate. If this less than 2 (or
%   if it's NaN), bootstrapping is not performed.
%
% "trueval" is the output of the data function when given the real data.
% "proxmean" is the mean of the data function's output across all proxy
%   inputs, or "trueval" if bootstrapping was not performed.
% "proxvar" is the variance of the data function's output across all proxy
%   inputs, or NaN if bootstrapping was not performed.


% Calculate the true output no matter what.
trueval = datafunc(dataseries);

% Initialize proxy output to default values.
proxmean = trueval;
proxvar = nan(size( trueval ));


% If we want bootstrapping, build proxies and collect statistics.
if replicates >= 2

  sampcount = size(dataseries,2);

  % Force the output to be one-dimensional so that we know how many
  % dimensions we have in the per-proxy output array.
  replivals = zeros([ replicates numel(trueval) ]);

  % Build proxies and compute per-proxy output.
  for ridx = 1:replicates
    thisidxvec = randi( sampcount, [1 sampcount] );
    thisproxy = dataseries(:,thisidxvec);
    thisresult = datafunc(thisproxy);

    % Force the output to be one-dimensional.
    replivals(ridx,:) = thisresult(:);
  end

  % Compute and store statistics from the per-proxy output.
  % Map this back to the geometry of the original output.

  scratch = mean(replivals, 1);
  proxmean(:) = scratch(:);
  scratch = var(replivals, [], 1);
  proxvar(:) = scratch(:);

end


% Done.
end


%
% This is the end of the file.
